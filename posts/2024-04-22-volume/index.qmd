---
title: "Analyzing gym data"
author: "Simon Grimm "
date: 2024-04-19
format:
  html:
    code-fold: true
    code-numbering: true
    code-numbering-start: 1
jupyter: venv
cap-location: bottom
---

```{python}
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import datetime as dt
import matplotlib.dates as mdates
```



# Volume, Volume, Volume

```{python}
df = pd.read_csv("../../data/2024-04-22.csv")
df['Date'] = pd.to_datetime(df['Date'], format='%Y-%m-%d %I:%M:%S %p')
df['Volume'] = df['Weight'] * df["Reps"]

day_volume = df.groupby(df['Date'].dt.date)['Volume'].sum()

fig, ax = plt.subplots(figsize=(10, 5), dpi=600)

move_to_boston = dt.datetime(2022, 10, 1)
switch_to_thrall = dt.datetime(2023, 12, 1)

ax.axvline(x=move_to_boston, color='r', linestyle='--')
ax.text(move_to_boston - pd.DateOffset(days=25), 3e6, 'Move to Boston', ha='right', va='bottom')
ax.axvline(x=switch_to_thrall, color='g', linestyle='--')
ax.text(switch_to_thrall - pd.DateOffset(days=25), 3e6, 'Switch to Thrall Routine', ha='right', va='bottom')

sns.lineplot(x=day_volume.index, y=day_volume.cumsum(), ax=ax)
ax.xaxis.set_major_locator(mdates.YearLocator())
ax.xaxis.set_minor_locator(mdates.MonthLocator())
ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))

ax.set_ylim(0, 3.5e6)

for y in np.arange(1e6, 4e6, 1e6):
    ax.axhline(y=y, color='grey', linestyle='-', alpha=0.1)
ax.set_yticks([1e6, 2e6, 3e6])
ax.set_yticklabels(['1 Million\nlbs', '2 Million\nlbs', '3 Million\nlbs'])
ax.set_ylabel('')
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)

ax.set_title("Total Volume per Day")
plt.show()
```



```{python}
df = pd.read_csv("../../data/2024-04-22.csv")
df['Date'] = pd.to_datetime(df['Date'], format='%Y-%m-%d %I:%M:%S %p')
df['Month'] = df['Date'].dt.to_period('M')
df['Volume'] = df['Weight'] * df["Reps"]
monthly_volume = df.groupby('Month')['Volume'].sum()

fig, ax = plt.subplots(figsize=(10, 5), dpi=600)
monthly_volume.plot(kind='bar', ax=ax, color='skyblue')

ax.set_title("Pounds per Month")
ax.set_xlabel("Month")
ax.set_ylabel("Total Pounds")

# Convert the PeriodIndex to a DatetimeIndex
monthly_volume.index = monthly_volume.index.to_timestamp()

#color bars after move to boston red, and g
move_to_boston = dt.datetime(2022, 10, 1)
switch_to_thrall = dt.datetime(2023, 12, 1)



plt.xticks(rotation=45)

ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)

plt.tight_layout()
plt.show()


```




## Volume and max rep weight per exercise


```{python}
df = pd.read_csv("../../data/2024-04-22.csv")
df['Date'] = pd.to_datetime(df['Date'], format='%Y-%m-%d %I:%M:%S %p')
# Count unique exercises per day
exercise_counts = df.groupby(['Date', 'Exercise Name']).size().reset_index(name='count')['Exercise Name'].value_counts()
#print(exercise_counts)
n_plots = exercise_counts[exercise_counts > 40].count()

fig, axs = plt.subplots(n_plots, figsize=(10,3*n_plots), dpi=600, sharex=True)

df["Volume"] = df["Weight"] * df["Reps"]
max_rep_weight = df.groupby(['Date', 'Exercise Name'])['Weight'].max().reset_index()
max_rep_weight.rename(columns={'Weight': 'Max Rep Weight'}, inplace=True)

# Merge the max rep weight back into the original DataFrame
df = pd.merge(df, max_rep_weight, on=['Date', 'Exercise Name'])

i=-1
for exercise, count in exercise_counts.items():
    if count > 40:
        i+=1
        sns.lineplot(x=df[df['Exercise Name'] == exercise]['Date'], y=df[df['Exercise Name'] == exercise]['Volume'], ax=axs[i], errorbar=None, markers=True, marker='o', alpha=0.5)
        ax2 = axs[i].twinx()
        sns.lineplot(x=df[df['Exercise Name'] == exercise]['Date'], y=df[df['Exercise Name'] == exercise]['Max Rep Weight'], ax=ax2, errorbar=None, markers=True, color='red', marker='o', alpha=0.5)

        axs[i].set_title(f"{exercise} Volume per day")















#exercise_counts = exercise_counts.drop_duplicates(subset=['Date', 'Exercise Name'])
#print(exercise_counts)
#exercise_counts = exercise_counts.groupby('Exercise Name')['count'].sum()
#
#print(exercise_counts)
#
## Plot exercise counts
#fig, ax = plt.subplots(figsize=(10, 5), dpi=600)
#exercise_counts.plot(kind='bar', ax=ax)
#ax.set_title("Number of Days Each Exercise Was Performed")
#ax.set_xlabel("Exercise")
#ax.set_ylabel("Number of Days")
#
#plt.xticks(rotation=45)
#ax.spines['top'].set_visible(False)
#ax.spines['right'].set_visible(False)
#
#plt.tight_layout()
#plt.show()



```